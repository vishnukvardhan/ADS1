{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red127\green0\blue85;}
{\*\expandedcolortbl;;\csgenericrgb\c49804\c0\c33333;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf2 package m2;\
\
public class Percolation \{\
	private boolean[][] sites;\
	private int grid;\
	private int beginNode;\
	private int endNode;\
\
	private WeightedQuickUnionUF QU;\
	private WeightedQuickUnionUF Backwash;\
\
	\
	public Percolation(int N) \{\
		N = N + 1;\
		QU = new WeightedQuickUnionUF(N * N + 1); \
		Backwash = new WeightedQuickUnionUF(N * N + 2);\
		\
		sites = new boolean[N][N];\
		grid = N - 1;\
		beginNode = 0;\
		endNode = N * N + 1;\
\
	\}\
\
	public void open(int i, int j) \{\
		\
\
		checkException(i, j);\
		if (!sites[j][i]) \{\
			sites[j][i] = true;\
		\}\
		int index = indexCalc(j, i);\
		\
		if (j != 1) \{\
			if (sites[j - 1][i]) \{\
				QU.union(index, index - 1);\
				Backwash.union(index, index - 1);\
			\}\
		\}\
		\
		if (j != grid) \{\
			if (sites[j + 1][i]) \{\
				QU.union(index, index + 1);\
				Backwash.union(index, index + 1);\
			\}\
		\}\
		\
		if (i != 1) \{\
			if (sites[j][i - 1]) \{\
				QU.union(index, j + grid * (i - 1));\
				Backwash.union(index, j + grid * (i - 1));\
			\}\
		\} else \{\
			QU.union(beginNode, index);\
			Backwash.union(beginNode, index);\
		\}\
		\
\
		if (i != grid) \{\
			if (sites[j][i + 1]) \{\
				QU.union(index, j + grid * (i + 1));\
				Backwash.union(index, j + grid * (i + 1));\
			\}\
		\} else \{\
			Backwash.union(index, endNode);\
		\}\
\
	\}\
\
	public boolean isOpen(int i, int j) \{\
\
		checkException(i, j);\
		\
		return sites[j][i];\
	\}\
\
	public boolean isFull(int i, int j) \{\
\
		checkException(i, j);\
		\
		return (QU.connected(indexCalc(j, i), beginNode));\
	\}\
\
	public boolean percolates() \{\
		return Backwash.connected(beginNode, endNode);\
	\}\
\
	private int indexCalc(int i, int j) \{\
		return i + grid * j;\
	\}\
\
	private void checkException(int i, int j) \{\
		if (i <= 0 || i > grid || j <= 0 || j > grid) \{\
			throw new IndexOutOfBoundsException("row index i out of bounds");\
		\}\
	\}\
\
\}\
public class WeightedQuickUnionUF \{\
	private int[] id; \
	private int[] sz; \
	private int count; \
\
	\
	public WeightedQuickUnionUF(int N) \{\
		count = N;\
		id = new int[N];\
		sz = new int[N];\
		for (int i = 0; i < N; i++) \{\
			id[i] = i;\
			sz[i] = 1;\
		\}\
	\}\
\
	\
	public int count() \{\
		return count;\
	\}\
\
	\
	public int find(int p) \{\
		while (p != id[p])\
			p = id[p];\
		return p;\
	\}\
\
	\
	public boolean connected(int p, int q) \{\
		return find(p) == find(q);\
	\}\
\
	\
	public void union(int p, int q) \{\
		int i = find(p);\
		int j = find(q);\
		if (i == j)\
			return;\
\
		\
		if (sz[i] < sz[j]) \{\
			id[i] = j;\
			sz[j] += sz[i];\
		\} else \{\
			id[j] = i;\
			sz[i] += sz[j];\
		\}\
		count--;\
	\}\
\
\}\
import java.util.Scanner;\
\
public class Solution \{\
\
	public static void main(String[] args) \{\
		// TODO Auto-generated method stub\
		Scanner sc = new Scanner(System.in);\
		int grid_size = sc.nextInt(); \
		Percolation perc = new Percolation(grid_size);\
		while(sc.hasNext() ) \{\
			int p = sc.nextInt();\
			int q = sc.nextInt();\
		\
			perc.open(p, q);\
		\}\
		System.out.println(perc.percolates());\
\
	\}\
\
\}\
\
}